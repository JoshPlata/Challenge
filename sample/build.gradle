plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.josue'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	testCompileOnly 'org.projectlombok:lombok:1.18.20'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

	runtimeOnly 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

/*
Formas de declaracion de dependencias

Cada forma de declaración en gradle define el alcance que tendrá la dependendcia dentro del ciclo de
vida de nuestro proyecto, también estas pueden tener uno de 3 diferenter roles descritos a continuación:

1.- Para declarar dependencias

2.- Como consumidor, para resolver un set de dependencias a archivos

3.- Como productos, para exponer artefactos y otras dependencias, para el consumo de otros proyectos.

A partir de esto tenemos los siguientes:

 	- implementation
	Solo de implementación, dependencias no expuestas

	- compileOnly
	Solo durante compilación

	- compileClasspath extends compileOnly, implementation
	Usado cuando se compila el código, por la tarea de compileJava.

	- annotationProcessor
	Procesadores de anotaciones usados durante la compilación

	-testAnnotationProcessor
	Procesadores de anotaciones usados durante la compilación en pruebas

	- runtimeOnly
	Solo durante tiempo de ejecución

	- runtimeClasspath extends runtimeOnly, implementation
	Para tiempo de ejecucion, con elementos de implementacion.

	- testImplementation extends implementation
	Dependencias de implentación para pruebas.

	- testCompileOnly
	Dependencias para compilar pruebas.

	- testCompileClasspath extends testCompileOnly, testImplementation
	Usado cuando se compila para pruebas, usado por la tarea de compileTestJava.

	- testRuntimeOnly extends runtimeOnly
	Para tiempo de ejecucion en pruebas.

	- testRuntimeClasspath extends testRuntimeOnly, testImplementation
	Usado en tiempo de ejecuciòn para pruebas, usado por la tarea test.

	- archives
	Artefactos producidos por este proyecto como jars, usados por gradle para determinar tareas default cuando lo construye.

	- default extends runtimeElements
	Contiene artefactos y dependencias requeridas por el proyecto en tiempo de ejecución.
* */